#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (c) 2021 Intel Corporation
#                    Borys Pop≈Çawski <borysp@invisiblethingslab.com>

import datetime

import click

from graminelibos import Manifest, get_tbssigstruct, sign_with_local_key, SGX_LIBPAL

@click.command()
@click.option('--output', '-o', type=click.Path(), required=True,
              help='Output .manifest.sgx file (manifest augmented with autogenerated fields)')
@click.option('--libpal', '-l', type=click.Path(exists=True, dir_okay=False), default=SGX_LIBPAL,
              help='Input libpal file')
@click.option('--key', '-k', type=click.Path(exists=True, dir_okay=False), required=True,
              help='specify signing key (.pem) file')
@click.option('--manifest', '-m', 'manifest_file', type=click.File('r', encoding='utf-8'),
              required=True, help='Input .manifest file')
@click.option('--sigfile', '-s', help='Output .sig file')
@click.option('--depfile', '-D', type=click.Path(), help='Generate dependencies for .manifest.sgx '
              'and .sig files')
@click.option('--quiet', '-q', is_flag=True, help='Don\'t display details')
def main(output, libpal, key, manifest_file, sigfile, depfile, quiet):
    # pylint: disable=too-many-arguments

    manifest = Manifest.load(manifest_file)

    expanded = manifest.expand_all_trusted_files()

    with open(output, 'w', encoding='utf-8') as f:
        manifest.dump(f)

    if not sigfile:
        if manifest_file.name.endswith('.manifest'):
            sigfile = manifest_file.name[:-len('.manifest')]
        else:
            sigfile = manifest_file.name
        sigfile += '.sig'

    today = datetime.date.today()
    sigstruct = get_tbssigstruct(output, today, libpal, verbose=not quiet)
    sigstruct.sign(sign_with_local_key, key)

    with open(sigfile, 'wb') as f:
        f.write(sigstruct.to_bytes())

    if depfile:
        with open(depfile, 'w') as f:
            # `.manifest.sgx` depends on all files we just expanded
            f.write(f'{output}:')
            for filename in expanded:
                f.write(f'  \\\n\t{filename}')
            f.write('\n')
            f.write('\n')

            # `.sig` additionally depends on libpal and key
            f.write(f'{sigfile}:')
            f.write(f'  \\\n\t{libpal}')
            f.write(f'  \\\n\t{key}')
            for filename in expanded:
                f.write(f'  \\\n\t{filename}')
            f.write('\n')
            f.write('\n')


if __name__ == '__main__':
    main() # pylint: disable=no-value-for-parameter
